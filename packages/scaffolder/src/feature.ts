import { existsSync } from 'fs';
import { parseFalsy, parseObjectExpression } from './expressions.js';
import { collectInputs } from './helpers.js';
import { Feature } from './types.js';
import handleError from './error.js';

/**
 * Process a feature and scaffold the files.
 */
export default async function processFeature(rootDir: string, feature: Feature) {
  const {
    config: {
      name,
      inputs: featureInputs = [],
      files: featureFiles = [],
    },
    path: featurePath,
  } = feature;

  // Prompt the user for all feature inputs.
  const inputs = await collectInputs(featureInputs);

  // The context variables passed to the expression parser.
  const expressionContext = {
    feature: {
      name,
      path: featurePath,
    },
    inputs,
  };

  // Collect the files to be generated by processing the "if" conditionals.
  const files = featureFiles
    // Parse the expression of any file attribute.
    .map((file) => parseObjectExpression({
      ...file,
      // Ensure that source and destination are prefixed with the feature
      // directory to allow the configuration to be relative.
      destination: `${featurePath}/${file.destination}`,
      source: `${featurePath}/${file.source}`,
    }, expressionContext))
    // Check if the already-parsed condition is not falsy.
    .filter(({ if: condition = null }) => condition === null || !parseFalsy(condition))
    .filter(({
      destination: destinationPath,
      source: sourcePath,
    }) => {
      // Ensure that the source exists and can be resolved.
      if (!existsSync(sourcePath)) {
        handleError(`Source file not found: ${sourcePath}`);
      }

      // Ensure that the destination does not exist.
      if (existsSync(destinationPath)) {
        handleError(`Destination file already exists: ${destinationPath}`);
      }

      return true;
    });

  if (!files.length) {
    handleError(`No files to generate for the feature ${name}`);
  }

  console.log('files', files);

  // Go through each file and generate the file from the calculated inputs.

  // Put the file in the new location.
}
