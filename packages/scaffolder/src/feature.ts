import { parseExpression } from './expressions.js';
import { collectInputs } from './helpers.js';
import { Feature } from './types.js';

/**
 * Process a feature and scaffold the files.
 */
export default async function processFeature(rootDir: string, feature: Feature) {
  const {
    config: {
      name,
      inputs: featureInputs = [],
      files: featureFiles = [],
    },
  } = feature;

  console.log('feature', feature);

  const inputs = await collectInputs(featureInputs);

  // Collect the files to be generated by processing the "if" conditionals.
  const files = featureFiles.filter(({ if: condition = null }) => {
    if (!condition) {
      return true;
    }

    console.log('condition', condition);

    const result = parseExpression(condition, {
      feature: {
        name,
      },
    });

    console.log('result', result, result.primitive, result.coerceString());

    return result.coerceString() === 'true';
  });

  console.log('inputs', inputs);
  // console.log('files', files);

  // Go through each file and generate the file from the calculated inputs.

  // Put the file in the new location.
}
